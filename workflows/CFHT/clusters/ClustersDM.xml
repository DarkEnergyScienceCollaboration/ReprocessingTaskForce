<?xml version="1.0" encoding="UTF-8"?>
<pipeline xmlns="http://glast-ground.slac.stanford.edu/pipeline" 
          xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" 
          xs:schemaLocation="http://glast-ground.slac.stanford.edu/pipeline 
			     http://srs.slac.stanford.edu/Pipeline-II/schemas/2.1/pipeline.xsd">
  
  <task name="ClustersDM" type="LSST" version="1.20">
    <notation>A simple task for running the DM for reprocessing Clusters</notation>
    <variables>
      <var name="SITE">IN2P3</var>
      <var name="MAXCPU">${100000 / (SITE=="IN2P3" ? 10 : 1)}</var>
      <var name="MAXCPULONG">${100000 / (SITE=="IN2P3" ? 10 : 1)}</var>
      <var name="SLAC_BATCH_OPTIONS">-R rhel60</var>
      <var name="IN2P3_BATCH_OPTIONS">-l os=cl7</var>
      <var name="BATCH_OPTIONS">${SITE=="IN2P3" ? IN2P3_BATCH_OPTIONS : SLAC_BATCH_OPTIONS}</var>
      <var name="DM_RELEASE">w_2017_14</var>
      <!-- Default location from which to setup DM -->
      <var name="SLAC_DM_DIR">/nfs/farm/g/desc/u1/Twinkles</var>
      <var name="IN2P3_DM_DIR">/sps/lsst/software/lsst_distrib/${DM_RELEASE}</var>
      <var name="DM_DIR">${SITE=="IN2P3" ? IN2P3_DM_DIR : SLAC_DM_DIR}</var>
      <var name="DM_SETUP">loadLSST.bash</var>
      <!-- Base directory where work files will be placed -->
      <var name="SLAC_OUTPUT_DATA_DIR">/nfs/farm/g/lsst/u1/users/tonyj</var>
      <var name="IN2P3_OUTPUT_DATA_DIR">/sps/lsst/data/clusters/workflow</var>
      <var name="OUTPUT_DATA_DIR">${SITE=="IN2P3" ? IN2P3_OUTPUT_DATA_DIR : SLAC_OUTPUT_DATA_DIR}</var>
      <!-- Base directory where script files will be placed -->
      <var name="SLAC_SCRIPT_LOCATION">/u/ki/boutigny/ki19/ReprocessingTaskForce/workflows/CFHT/clusters</var>
      <var name="IN2P3_SCRIPT_LOCATION">/sps/lsst/dev/lsstprod/ReprocessingTaskForce/workflows/CFHT/clusters</var>
      <var name="SCRIPT_LOCATION">${SITE=="IN2P3" ? IN2P3_SCRIPT_LOCATION : SLAC_SCRIPT_LOCATION}</var>
      <!-- Script name sand job site -->
      <var name="AND_DIR">${SCRIPT_LOCATION}/and_files_0229</var>
      <var name="SCRIPT_NAME">ClustersWorkflow.py</var>
      <var name="BATCH_NAME">ClustersBatch.sh</var>
      <var name="VISIT_FILE">visit.txt</var>
      <var name="VISIT_DIR">/sps/lsst/data/clusters/MACSJ2243.3-0935/rawDownload</var>
      <var name="JOBSITE">${SITE=="IN2P3" ? "LSST-IN2P3" : "SLAC"}</var>
    </variables>

    <!-- ingest images -->
    <process name="ingest" site="${JOBSITE}">
      <notation>Ingest the input data serially</notation>
      <job maxCPU="${MAXCPU}" batchOptions="${BATCH_OPTIONS}" executable="${SCRIPT_LOCATION}/${BATCH_NAME}"/>
    </process>

    <!-- processCcd -->
    <!--   setup -->
    <process name="setup_processccd" site="${JOBSITE}">
      <notation>Setup for processCcd</notation>
      <job maxCPU="${MAXCPU}" batchOptions="${BATCH_OPTIONS}" executable="${SCRIPT_LOCATION}/${BATCH_NAME}"/>
      <depends>
        <after process="ingest"/>
      </depends>
    </process>
    <!--   launch jobs -->
    <process name="processccd" site="${JOBSITE}">
      <notation>Run process ccd for all filter and visits</notation>
      <script><![CDATA[
      execfile("%s/%s" % (SLAC_SCRIPT_LOCATION, SCRIPT_NAME))
      run_processCcd()
      ]]>
      </script>
      <depends>
        <after process="setup_processccd"/>
      </depends>
      <createsSubtasks>
	<subtask>processFilter</subtask>
      </createsSubtasks>	
    </process>

    <!-- makeDiscreteSkyMap -->
    <process name="makeskymap" site="${JOBSITE}">
      <notation>Make the sky map</notation>
      <job maxCPU="${MAXCPU}" batchOptions="${BATCH_OPTIONS}" executable="${SCRIPT_LOCATION}/${BATCH_NAME}"/>
      <depends>
        <after process="processFilter.processfilter"/>
      </depends>
    </process>

    <!-- jointcal -->
    <!--   setup -->
    <process name="setup_jointcal" site="${JOBSITE}">
      <notation>Setup for jointcal</notation>
      <job maxCPU="${MAXCPU}" batchOptions="${BATCH_OPTIONS}" executable="${SCRIPT_LOCATION}/${BATCH_NAME}"/>
      <depends>
        <after process="makeskymap"/>
      </depends>
    </process>
    <!--   launch jobs -->
    <process name="jointcal" site="${JOBSITE}">
      <notation>Run jointcal for all filter</notation>
      <script><![CDATA[
      execfile("%s/%s" % (SLAC_SCRIPT_LOCATION, SCRIPT_NAME))
      run_jointcal()
      ]]>
      </script>
      <depends>
        <after process="setup_jointcal"/>
      </depends>
      <createsSubtasks>
	<subtask>jointcalFilter</subtask>
      </createsSubtasks>	
    </process>

    <!-- jointcalCoadd -->
    <!--   setup -->
    <process name="setup_jointcalCoadd" site="${JOBSITE}">
      <notation>Setup for jointcalCoadd</notation>
      <job maxCPU="${MAXCPU}" batchOptions="${BATCH_OPTIONS}" executable="${SCRIPT_LOCATION}/${BATCH_NAME}"/>
      <depends>
        <after process="jointcalFilter.jointcalfilter"/>
      </depends>
    </process>
    <!--   launch jobs -->
    <process name="jointcalCoadd" site="${JOBSITE}">
      <notation>Run jointcalCoadd for all filter</notation>
      <script><![CDATA[
      execfile("%s/%s" % (SLAC_SCRIPT_LOCATION, SCRIPT_NAME))
      run_jointcalCoadd()
      ]]>
      </script>
      <depends>
        <after process="setup_jointcalCoadd"/>
      </depends>
      <createsSubtasks>
	<subtask>jointcalCoaddFilter</subtask>
      </createsSubtasks>	
    </process>

    
    <!--   Subtasks -->
    <!--   Subtask to run processCcd -->
    <task name="processFilter" type="LSST">
      <process name="processfilter" site="${JOBSITE}">
	<variables>
	  <var name="streamID">${format(pipeline.stream, "%01d")}</var>
	</variables>
        <job batchOptions="-l sps=1,ct=259200,h_vmem=32G,os=cl7 -q huge" executable="${CUR_SCRIPT}"/>
      </process>                
    </task>
    <!--   Subtask to run jointcal -->
    <task name="jointcalFilter" type="LSST">
      <process name="jointcalfilter" site="${JOBSITE}">
	<variables>
	  <var name="streamID">${format(pipeline.stream, "%01d")}</var>
	</variables>
        <job batchOptions="-l sps=1,ct=60000,h_vmem=16G,os=cl7" executable="${CUR_SCRIPT}"/>
      </process>                
    </task>
    <!--   Subtask to run jointcalCoadd -->
    <task name="jointcalCoaddFilter" type="LSST">
      <process name="jointcalcoaddfilter" site="${JOBSITE}">
	<variables>
	  <var name="streamID">${format(pipeline.stream, "%01d")}</var>
	</variables>
        <job batchOptions="-l sps=1,ct=60000,h_vmem=4G,os=cl7" executable="${CUR_SCRIPT}"/>
      </process>                
    </task>
    
  </task>
</pipeline>
